name: Crawler Deployment 2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      account_id:
        description: 'Account ID to use'
        required: true
        default: '2'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'  
      timeout_hours:
        description: 'Timeout in hours (default: 6)'
        required: false
        default: '6'
        type: string
      part:
        description: 'Part number (01, 02, etc.)'
        required: false
        default: '01'   
  push:
    branches:
      - main
      - develop

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}  
  CONTAINER_NAME: crawler-github
  ACCOUNT_ID: 2

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 420  # 7 hours (slightly more than 6 to allow cleanup)
    
    steps:
    - name: üöÄ Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up environment variables
      run: |
        echo "ACCOUNT_ID=${{ github.event.inputs.account_id || '1' }}" >> $GITHUB_ENV
        echo "TAG=${{ github.event.inputs.tag || env.DEFAULT_TAG }}" >> $GITHUB_ENV
        echo "LOG_LEVEL=${{ github.event.inputs.log_level || 'INFO' }}" >> $GITHUB_ENV
        echo "FULL_IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag || env.DEFAULT_TAG }}" >> $GITHUB_ENV  
      
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_TOKEN }}
        
    - name: ‚¨áÔ∏è Pull Docker Image
      run: |
        echo "üîÑ Pulling Docker image: ${{ env.DOCKER_IMAGE }}"
        docker pull ${{ env.DOCKER_IMAGE }}
        
    - name: üßπ Clean up existing containers
      run: |
        echo "üßπ Cleaning up existing containers..."
        # Stop container if running
        if docker ps -q -f name=${{ env.CONTAINER_NAME }}; then
          echo "‚èπÔ∏è Stopping existing container: ${{ env.CONTAINER_NAME }}"
          docker stop ${{ env.CONTAINER_NAME }} || true
        else
          echo "‚ÑπÔ∏è No running container named ${{ env.CONTAINER_NAME }} found"
        fi
        
        # Remove container if exists
        if docker ps -aq -f name=${{ env.CONTAINER_NAME }}; then
          echo "üóëÔ∏è Removing existing container: ${{ env.CONTAINER_NAME }}"
          docker rm ${{ env.CONTAINER_NAME }} || true
        else
          echo "‚ÑπÔ∏è No container named ${{ env.CONTAINER_NAME }} found to remove"
        fi
        
    - name: üìÅ Create logs directory
      run: |
        mkdir -p logs
        chmod 755 logs
        
    - name: üèÉ Run Crawler Container
      run: |
        echo "üöÄ Starting Crawler container..."
        docker run \
          --name ${{ env.CONTAINER_NAME }} \
          -e PYTHONUNBUFFERED=1 \
          -e ENVIRONMENT=${{ github.event.inputs.environment || 'production' }} \
          -e GITHUB_RUN_ID=${{ github.run_id }} \
          -e DB_PASSWORD=${{ env.DB_PASSWORD }} \
          -e DB_HOST=${{ env.DB_HOST }} \
          -e DB_PORT=${{ env.DB_PORT }} \
          -e GITHUB_RUN_NUMBER=${{ github.run_number }} \
          -e GITHUB_SHA=${{ github.sha }} \
          -e ACCOUNT_ID="${{ env.ACCOUNT_ID }}" \
          -e GITHUB_REF=${{ github.ref }} \
          $(echo "${{ secrets.ENV_VARS }}" | base64 -d | sed 's/^/-e /; s/$/\\/' | tr -d '\n') \
          -v ${{ github.workspace }}/logs:/app/logs \
          ${{ env.DOCKER_IMAGE }} \
          python main_gofa.py
          
    - name: ‚úÖ Verify Container Status
      run: |
        echo "üìä Container Information:"
        echo "========================="
        docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
        
        # Wait a moment for container to initialize
        sleep 5
        
        # Check if container is still running
        if docker ps -q -f name=${{ env.CONTAINER_NAME }} -f status=running; then
          echo "‚úÖ Container is running successfully!"
        else
          echo "‚ùå Container failed to start or exited"
          echo "üìã Container logs:"
          docker logs ${{ env.CONTAINER_NAME }}
          exit 1
        fi
        
    - name: üìã Show Initial Logs
      run: |
        echo "üìù Initial container logs (last 50 lines):"
        echo "==========================================="
        docker logs ${{ env.CONTAINER_NAME }} --tail 50
    
    - name: ‚è≥ Wait for Python Script Completion and Stream Logs
      run: |
        echo "‚è≥ Waiting for Python script to complete and streaming logs..."
        
        # Set timeout (default 6 hours)
        TIMEOUT_HOURS=${{ github.event.inputs.timeout_hours || '6' }}
        TIMEOUT_SECONDS=$((TIMEOUT_HOURS * 3600))
        START_TIME=$(date +%s)
        
        echo "‚è∞ Timeout set to ${TIMEOUT_HOURS} hours (${TIMEOUT_SECONDS} seconds)"
        echo "üìù Streaming container logs in real-time:"
        echo "=========================================="
        
        # Start following logs in background
        docker logs -f ${{ env.CONTAINER_NAME }} &
        LOGS_PID=$!
        
        # Monitor container status
        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          
          # Check if timeout reached
          if [ $ELAPSED_TIME -ge $TIMEOUT_SECONDS ]; then
            echo ""
            echo "‚è∞ Timeout reached after ${TIMEOUT_HOURS} hours"
            echo "üõë Forcefully stopping container..."
            kill $LOGS_PID 2>/dev/null || true
            docker stop ${{ env.CONTAINER_NAME }} || true
            echo "‚ùå Process terminated due to timeout"
            break
          fi
          
          # Check container status
          if ! docker ps -q -f name=${{ env.CONTAINER_NAME }} -f status=running > /dev/null; then
            echo ""
            echo "‚úÖ Container has finished execution"
            
            # Stop log streaming
            kill $LOGS_PID 2>/dev/null || true
            
            # Get container exit code
            EXIT_CODE=$(docker inspect ${{ env.CONTAINER_NAME }} --format='{{.State.ExitCode}}')
            echo "üìä Container exit code: $EXIT_CODE"
            
            if [ "$EXIT_CODE" = "0" ]; then
              echo "üéâ Python script completed successfully!"
            else
              echo "‚ùå Python script failed with exit code: $EXIT_CODE"
            fi
            break
          fi
          
          # Check every 30 seconds
          sleep 30
        done
        
    - name: üìã Show Final Logs
      if: always()
      run: |
        echo "üìù Final container logs:"
        echo "========================"
        docker logs ${{ env.CONTAINER_NAME }}
        
    - name: üßπ Final Cleanup
      if: always()
      run: |
        echo "üßπ Performing final cleanup..."
        
        # Stop container if still running
        if docker ps -q -f name=${{ env.CONTAINER_NAME }}; then
          echo "‚èπÔ∏è Stopping container: ${{ env.CONTAINER_NAME }}"
          docker stop ${{ env.CONTAINER_NAME }} || true
        fi
        
        # Get final container info
        if docker ps -aq -f name=${{ env.CONTAINER_NAME }}; then
          echo "üìä Final container status:"
          docker inspect ${{ env.CONTAINER_NAME }} --format='Container: {{.Name}} | Status: {{.State.Status}} | Exit Code: {{.State.ExitCode}} | Finished At: {{.State.FinishedAt}}'
          
          echo "üóëÔ∏è Removing container: ${{ env.CONTAINER_NAME }}"
          docker rm ${{ env.CONTAINER_NAME }} || true
        fi
        
        echo "‚úÖ Cleanup completed"
    
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'cleanup'
    
    steps:
    - name: üßπ Cleanup Docker Resources
      run: |
        echo "üßπ Cleaning up Docker resources..."
        
        # Stop and remove container
        if docker ps -aq -f name=${{ env.CONTAINER_NAME }}; then
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
          echo "‚úÖ Container cleaned up"
        fi
        
        # Remove unused images
        docker image prune -f
        echo "‚úÖ Unused images removed"

  trigger_next_chunk:
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ always() && needs.deploy.result == 'success' }}
    steps:
      - name: Trigger next chunk or complete
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const currentPart = "${{ github.event.inputs.part || '01' }}";
            let nextPartNumber;

            console.log(`Current part: ${currentPart}`);

            if (currentPart === "all") {
              console.log("Initial 'all' detected, starting with part 001.");
              nextPartNumber = 1;
            } else {
              nextPartNumber = parseInt(currentPart) + 1;
            }

            console.log(`Next part number: ${nextPartNumber}`);

            if (nextPartNumber <= 63000000) { 
              const nextPartStr = String(nextPartNumber).padStart(3, '0');
              console.log(`Triggering next chunk: ${nextPartStr}`);
              
              try {
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'main.yml',
                  ref: 'main',
                  inputs: { 
                    part: nextPartStr 
                  }
                });
                console.log(`Successfully triggered workflow for part ${nextPartStr}`);
              } catch (error) {
                console.error(`Failed to trigger workflow: ${error.message}`);
                throw error;
              }
            } else {
              console.log("All chunks processed. Workflow sequence completed.");
            }
